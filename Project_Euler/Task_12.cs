//The sequence of triangle numbers is generated by adding the natural numbers.
//    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?


using System;
using System.Collections.Generic;
using System.Linq;

namespace Project_Euler
{
    class Task_12
    {
        private const int NumberOfDivisors= 500;
        private List<int> primes;

        public Task_12()
        {
            primes = new List<int> { 2, 3, 5, 7 };
        }

        public int Solution()
        {
            int tr;
            int numOfp;
            int numOfDiv;            
            for (int n=1; ;n++)
            {
                addPrime(n);
                tr = ((n + 1) * n) / 2;
                numOfDiv = 1;
                foreach (int p in primes)
                {
                    numOfp = 0;
                    while (tr % p == 0)
                    {
                        tr /= p;
                        numOfp++;
                    }
                    numOfDiv *= (numOfp + 1);
                }
                if (numOfDiv > NumberOfDivisors)
                    return ((n + 1) * n) / 2; 
            }
        }

        private void addPrime(int num)
        {
            int lastPrime = primes.Last();
            if (num < lastPrime)
                return;
            int n = lastPrime + 2;
            while (!IsPrime(n))
                n += 2;
            primes.Add(n);
        }

        private bool IsPrime(int n)
        {
            if (n == 1)
                return false;
            bool isPrime = true;
            int MaxF = (int)Math.Sqrt(n);
            for (int i = 2; i <= MaxF; i++)
            {
                if (n % i == 0)
                {
                    isPrime = false;
                    break;
                }
            }
            return isPrime;
        }

    }
}
